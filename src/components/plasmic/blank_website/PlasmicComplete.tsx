/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hf8ZGitZQmRCe58jzU6tZp
// Component: SJ4DUgE763l1

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: hf8ZGitZQmRCe58jzU6tZp/projectcss
import sty from "./PlasmicComplete.module.css"; // plasmic-import: SJ4DUgE763l1/css

createPlasmicElementProxy;

export type PlasmicComplete__VariantMembers = {};
export type PlasmicComplete__VariantsArgs = {};
type VariantPropType = keyof PlasmicComplete__VariantsArgs;
export const PlasmicComplete__VariantProps = new Array<VariantPropType>();

export type PlasmicComplete__ArgsType = {};
type ArgPropType = keyof PlasmicComplete__ArgsType;
export const PlasmicComplete__ArgProps = new Array<ArgPropType>();

export type PlasmicComplete__OverridesType = {
  root?: Flex__<"div">;
  complete?: Flex__<"div">;
  mainContent?: Flex__<"div">;
  tableTitleHuge?: Flex__<"div">;
  tableHeader?: Flex__<"div">;
  header?: Flex__<"div">;
  emoji?: Flex__<"div">;
  textField?: Flex__<"div">;
  continueButton?: Flex__<"div">;
  textButton?: Flex__<"div">;
};

export interface DefaultCompleteProps {
  className?: string;
}

const $$ = {};

function PlasmicComplete__RenderFunc(props: {
  variants: PlasmicComplete__VariantsArgs;
  args: PlasmicComplete__ArgsType;
  overrides: PlasmicComplete__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"complete"}
            data-plasmic-override={overrides.complete}
            className={classNames(projectcss.all, sty.complete)}
          >
            <div
              data-plasmic-name={"mainContent"}
              data-plasmic-override={overrides.mainContent}
              className={classNames(projectcss.all, sty.mainContent)}
            >
              <div
                data-plasmic-name={"tableTitleHuge"}
                data-plasmic-override={overrides.tableTitleHuge}
                className={classNames(projectcss.all, sty.tableTitleHuge)}
              >
                <div
                  data-plasmic-name={"tableHeader"}
                  data-plasmic-override={overrides.tableHeader}
                  className={classNames(projectcss.all, sty.tableHeader)}
                >
                  <div
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.header
                    )}
                  >
                    {"Yeeeeah"}
                  </div>
                  <div
                    data-plasmic-name={"emoji"}
                    data-plasmic-override={overrides.emoji}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.emoji
                    )}
                  >
                    {
                      "\ud83c\udf7d\ufe0f \u2192 \ud83d\udcbe \u2192 \ud83d\uddc3\ufe0f"
                    }
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"textField"}
                data-plasmic-override={overrides.textField}
                className={classNames(projectcss.all, sty.textField)}
              >
                <div
                  data-plasmic-name={"continueButton"}
                  data-plasmic-override={overrides.continueButton}
                  className={classNames(projectcss.all, sty.continueButton)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToAddItem"] = true
                      ? (() => {
                          const actionArgs = { destination: `/add-item` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              location.assign(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAddItem"] != null &&
                      typeof $steps["goToAddItem"] === "object" &&
                      typeof $steps["goToAddItem"].then === "function"
                    ) {
                      $steps["goToAddItem"] = await $steps["goToAddItem"];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"textButton"}
                    data-plasmic-override={overrides.textButton}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.textButton
                    )}
                  >
                    {"Nice! Add more!!"}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "complete",
    "mainContent",
    "tableTitleHuge",
    "tableHeader",
    "header",
    "emoji",
    "textField",
    "continueButton",
    "textButton"
  ],
  complete: [
    "complete",
    "mainContent",
    "tableTitleHuge",
    "tableHeader",
    "header",
    "emoji",
    "textField",
    "continueButton",
    "textButton"
  ],
  mainContent: [
    "mainContent",
    "tableTitleHuge",
    "tableHeader",
    "header",
    "emoji",
    "textField",
    "continueButton",
    "textButton"
  ],
  tableTitleHuge: ["tableTitleHuge", "tableHeader", "header", "emoji"],
  tableHeader: ["tableHeader", "header", "emoji"],
  header: ["header"],
  emoji: ["emoji"],
  textField: ["textField", "continueButton", "textButton"],
  continueButton: ["continueButton", "textButton"],
  textButton: ["textButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  complete: "div";
  mainContent: "div";
  tableTitleHuge: "div";
  tableHeader: "div";
  header: "div";
  emoji: "div";
  textField: "div";
  continueButton: "div";
  textButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComplete__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComplete__VariantsArgs;
    args?: PlasmicComplete__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComplete__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicComplete__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComplete__ArgProps,
          internalVariantPropNames: PlasmicComplete__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComplete__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComplete";
  } else {
    func.displayName = `PlasmicComplete.${nodeName}`;
  }
  return func;
}

export const PlasmicComplete = Object.assign(
  // Top-level PlasmicComplete renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    complete: makeNodeComponent("complete"),
    mainContent: makeNodeComponent("mainContent"),
    tableTitleHuge: makeNodeComponent("tableTitleHuge"),
    tableHeader: makeNodeComponent("tableHeader"),
    header: makeNodeComponent("header"),
    emoji: makeNodeComponent("emoji"),
    textField: makeNodeComponent("textField"),
    continueButton: makeNodeComponent("continueButton"),
    textButton: makeNodeComponent("textButton"),

    // Metadata about props expected for PlasmicComplete
    internalVariantProps: PlasmicComplete__VariantProps,
    internalArgProps: PlasmicComplete__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicComplete;
/* prettier-ignore-end */
