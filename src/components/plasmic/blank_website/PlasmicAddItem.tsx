/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hf8ZGitZQmRCe58jzU6tZp
// Component: EAJCobkq-xd9

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: hf8ZGitZQmRCe58jzU6tZp/projectcss
import sty from "./PlasmicAddItem.module.css"; // plasmic-import: EAJCobkq-xd9/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Oj9c9bv_os2P/icon

createPlasmicElementProxy;

export type PlasmicAddItem__VariantMembers = {};
export type PlasmicAddItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddItem__VariantsArgs;
export const PlasmicAddItem__VariantProps = new Array<VariantPropType>();

export type PlasmicAddItem__ArgsType = {};
type ArgPropType = keyof PlasmicAddItem__ArgsType;
export const PlasmicAddItem__ArgProps = new Array<ArgPropType>();

export type PlasmicAddItem__OverridesType = {
  root?: Flex__<"div">;
  addItem?: Flex__<"div">;
  header?: Flex__<"div">;
  emoji?: Flex__<"div">;
  subtitle?: Flex__<"div">;
  mainContent?: Flex__<"div">;
  tableTitleHuge?: Flex__<"div">;
  tableHeader?: Flex__<"div">;
  addNewMenuItem?: Flex__<"div">;
  textField?: Flex__<"div">;
  textFieldAtom?: Flex__<"div">;
  textField2?: Flex__<"div">;
  textFieldAtom2?: Flex__<"div">;
  dropdown?: Flex__<"div">;
  dropdown2?: Flex__<"div">;
  dropdown3?: Flex__<"div">;
  dropdown4?: Flex__<"div">;
  frame2?: Flex__<"div">;
  textField3?: Flex__<"div">;
  textFieldAtom3?: Flex__<"div">;
  textField4?: Flex__<"div">;
  textFieldAtom4?: Flex__<"div">;
  textField5?: Flex__<"div">;
  addItemButton?: Flex__<"div">;
  textButton?: Flex__<"div">;
  cancelItemButton?: Flex__<"div">;
  textButton2?: Flex__<"div">;
};

export interface DefaultAddItemProps {
  className?: string;
}

const $$ = {};

function PlasmicAddItem__RenderFunc(props: {
  variants: PlasmicAddItem__VariantsArgs;
  args: PlasmicAddItem__ArgsType;
  overrides: PlasmicAddItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"addItem"}
            data-plasmic-override={overrides.addItem}
            className={classNames(projectcss.all, sty.addItem)}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                data-plasmic-name={"emoji"}
                data-plasmic-override={overrides.emoji}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.emoji
                )}
              >
                {"\ud83e\udee0"}
              </div>
              <div
                data-plasmic-name={"subtitle"}
                data-plasmic-override={overrides.subtitle}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.subtitle
                )}
              >
                {"Zero Culture\u00ae homework department"}
              </div>
            </div>
            <div
              data-plasmic-name={"mainContent"}
              data-plasmic-override={overrides.mainContent}
              className={classNames(projectcss.all, sty.mainContent)}
            >
              <div
                data-plasmic-name={"tableTitleHuge"}
                data-plasmic-override={overrides.tableTitleHuge}
                className={classNames(projectcss.all, sty.tableTitleHuge)}
              >
                <div
                  data-plasmic-name={"tableHeader"}
                  data-plasmic-override={overrides.tableHeader}
                  className={classNames(projectcss.all, sty.tableHeader)}
                >
                  <div
                    data-plasmic-name={"addNewMenuItem"}
                    data-plasmic-override={overrides.addNewMenuItem}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.addNewMenuItem
                    )}
                  >
                    {"Add fucking item "}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"textField"}
                data-plasmic-override={overrides.textField}
                className={classNames(projectcss.all, sty.textField)}
              >
                <div
                  data-plasmic-name={"textFieldAtom"}
                  data-plasmic-override={overrides.textFieldAtom}
                  className={classNames(projectcss.all, sty.textFieldAtom)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8YqPs
                    )}
                  >
                    {"Name"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"textField2"}
                data-plasmic-override={overrides.textField2}
                className={classNames(projectcss.all, sty.textField2)}
              >
                <div
                  data-plasmic-name={"textFieldAtom2"}
                  data-plasmic-override={overrides.textFieldAtom2}
                  className={classNames(projectcss.all, sty.textFieldAtom2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fq5Y
                    )}
                  >
                    {"Description"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"dropdown"}
                data-plasmic-override={overrides.dropdown}
                className={classNames(projectcss.all, sty.dropdown)}
              >
                <div
                  data-plasmic-name={"dropdown2"}
                  data-plasmic-override={overrides.dropdown2}
                  className={classNames(projectcss.all, sty.dropdown2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__six4T
                    )}
                  >
                    {"Food Category"}
                  </div>
                  <ChevronDownIcon
                    className={classNames(projectcss.all, sty.svg__uy1O)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"dropdown3"}
                data-plasmic-override={overrides.dropdown3}
                className={classNames(projectcss.all, sty.dropdown3)}
              >
                <div
                  data-plasmic-name={"dropdown4"}
                  data-plasmic-override={overrides.dropdown4}
                  className={classNames(projectcss.all, sty.dropdown4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Ncdh
                    )}
                  >
                    {"Measure Unit"}
                  </div>
                  <ChevronDownIcon
                    className={classNames(projectcss.all, sty.svg__zSQq8)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"frame2"}
                data-plasmic-override={overrides.frame2}
                className={classNames(projectcss.all, sty.frame2)}
              >
                <div
                  data-plasmic-name={"textField3"}
                  data-plasmic-override={overrides.textField3}
                  className={classNames(projectcss.all, sty.textField3)}
                >
                  <div
                    data-plasmic-name={"textFieldAtom3"}
                    data-plasmic-override={overrides.textFieldAtom3}
                    className={classNames(projectcss.all, sty.textFieldAtom3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Kj6S
                      )}
                    >
                      {"Price"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"textField4"}
                  data-plasmic-override={overrides.textField4}
                  className={classNames(projectcss.all, sty.textField4)}
                >
                  <div
                    data-plasmic-name={"textFieldAtom4"}
                    data-plasmic-override={overrides.textFieldAtom4}
                    className={classNames(projectcss.all, sty.textFieldAtom4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kaern
                      )}
                    >
                      {"VAT %"}
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"textField5"}
                data-plasmic-override={overrides.textField5}
                className={classNames(projectcss.all, sty.textField5)}
              >
                <div
                  data-plasmic-name={"addItemButton"}
                  data-plasmic-override={overrides.addItemButton}
                  className={classNames(projectcss.all, sty.addItemButton)}
                >
                  <div
                    data-plasmic-name={"textButton"}
                    data-plasmic-override={overrides.textButton}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.textButton
                    )}
                  >
                    {"Add Item!!"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"cancelItemButton"}
                  data-plasmic-override={overrides.cancelItemButton}
                  className={classNames(projectcss.all, sty.cancelItemButton)}
                >
                  <div
                    data-plasmic-name={"textButton2"}
                    data-plasmic-override={overrides.textButton2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.textButton2
                    )}
                  >
                    {"Cancel"}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "addItem",
    "header",
    "emoji",
    "subtitle",
    "mainContent",
    "tableTitleHuge",
    "tableHeader",
    "addNewMenuItem",
    "textField",
    "textFieldAtom",
    "textField2",
    "textFieldAtom2",
    "dropdown",
    "dropdown2",
    "dropdown3",
    "dropdown4",
    "frame2",
    "textField3",
    "textFieldAtom3",
    "textField4",
    "textFieldAtom4",
    "textField5",
    "addItemButton",
    "textButton",
    "cancelItemButton",
    "textButton2"
  ],
  addItem: [
    "addItem",
    "header",
    "emoji",
    "subtitle",
    "mainContent",
    "tableTitleHuge",
    "tableHeader",
    "addNewMenuItem",
    "textField",
    "textFieldAtom",
    "textField2",
    "textFieldAtom2",
    "dropdown",
    "dropdown2",
    "dropdown3",
    "dropdown4",
    "frame2",
    "textField3",
    "textFieldAtom3",
    "textField4",
    "textFieldAtom4",
    "textField5",
    "addItemButton",
    "textButton",
    "cancelItemButton",
    "textButton2"
  ],
  header: ["header", "emoji", "subtitle"],
  emoji: ["emoji"],
  subtitle: ["subtitle"],
  mainContent: [
    "mainContent",
    "tableTitleHuge",
    "tableHeader",
    "addNewMenuItem",
    "textField",
    "textFieldAtom",
    "textField2",
    "textFieldAtom2",
    "dropdown",
    "dropdown2",
    "dropdown3",
    "dropdown4",
    "frame2",
    "textField3",
    "textFieldAtom3",
    "textField4",
    "textFieldAtom4",
    "textField5",
    "addItemButton",
    "textButton",
    "cancelItemButton",
    "textButton2"
  ],
  tableTitleHuge: ["tableTitleHuge", "tableHeader", "addNewMenuItem"],
  tableHeader: ["tableHeader", "addNewMenuItem"],
  addNewMenuItem: ["addNewMenuItem"],
  textField: ["textField", "textFieldAtom"],
  textFieldAtom: ["textFieldAtom"],
  textField2: ["textField2", "textFieldAtom2"],
  textFieldAtom2: ["textFieldAtom2"],
  dropdown: ["dropdown", "dropdown2"],
  dropdown2: ["dropdown2"],
  dropdown3: ["dropdown3", "dropdown4"],
  dropdown4: ["dropdown4"],
  frame2: [
    "frame2",
    "textField3",
    "textFieldAtom3",
    "textField4",
    "textFieldAtom4"
  ],
  textField3: ["textField3", "textFieldAtom3"],
  textFieldAtom3: ["textFieldAtom3"],
  textField4: ["textField4", "textFieldAtom4"],
  textFieldAtom4: ["textFieldAtom4"],
  textField5: [
    "textField5",
    "addItemButton",
    "textButton",
    "cancelItemButton",
    "textButton2"
  ],
  addItemButton: ["addItemButton", "textButton"],
  textButton: ["textButton"],
  cancelItemButton: ["cancelItemButton", "textButton2"],
  textButton2: ["textButton2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  addItem: "div";
  header: "div";
  emoji: "div";
  subtitle: "div";
  mainContent: "div";
  tableTitleHuge: "div";
  tableHeader: "div";
  addNewMenuItem: "div";
  textField: "div";
  textFieldAtom: "div";
  textField2: "div";
  textFieldAtom2: "div";
  dropdown: "div";
  dropdown2: "div";
  dropdown3: "div";
  dropdown4: "div";
  frame2: "div";
  textField3: "div";
  textFieldAtom3: "div";
  textField4: "div";
  textFieldAtom4: "div";
  textField5: "div";
  addItemButton: "div";
  textButton: "div";
  cancelItemButton: "div";
  textButton2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddItem__VariantsArgs;
    args?: PlasmicAddItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAddItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddItem__ArgProps,
          internalVariantPropNames: PlasmicAddItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddItem";
  } else {
    func.displayName = `PlasmicAddItem.${nodeName}`;
  }
  return func;
}

export const PlasmicAddItem = Object.assign(
  // Top-level PlasmicAddItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    addItem: makeNodeComponent("addItem"),
    header: makeNodeComponent("header"),
    emoji: makeNodeComponent("emoji"),
    subtitle: makeNodeComponent("subtitle"),
    mainContent: makeNodeComponent("mainContent"),
    tableTitleHuge: makeNodeComponent("tableTitleHuge"),
    tableHeader: makeNodeComponent("tableHeader"),
    addNewMenuItem: makeNodeComponent("addNewMenuItem"),
    textField: makeNodeComponent("textField"),
    textFieldAtom: makeNodeComponent("textFieldAtom"),
    textField2: makeNodeComponent("textField2"),
    textFieldAtom2: makeNodeComponent("textFieldAtom2"),
    dropdown: makeNodeComponent("dropdown"),
    dropdown2: makeNodeComponent("dropdown2"),
    dropdown3: makeNodeComponent("dropdown3"),
    dropdown4: makeNodeComponent("dropdown4"),
    frame2: makeNodeComponent("frame2"),
    textField3: makeNodeComponent("textField3"),
    textFieldAtom3: makeNodeComponent("textFieldAtom3"),
    textField4: makeNodeComponent("textField4"),
    textFieldAtom4: makeNodeComponent("textFieldAtom4"),
    textField5: makeNodeComponent("textField5"),
    addItemButton: makeNodeComponent("addItemButton"),
    textButton: makeNodeComponent("textButton"),
    cancelItemButton: makeNodeComponent("cancelItemButton"),
    textButton2: makeNodeComponent("textButton2"),

    // Metadata about props expected for PlasmicAddItem
    internalVariantProps: PlasmicAddItem__VariantProps,
    internalArgProps: PlasmicAddItem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddItem;
/* prettier-ignore-end */
