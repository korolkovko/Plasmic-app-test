/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hf8ZGitZQmRCe58jzU6tZp
// Component: F9xxfcEdlOos

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: hf8ZGitZQmRCe58jzU6tZp/projectcss
import sty from "./PlasmicButtonAddItem.module.css"; // plasmic-import: F9xxfcEdlOos/css

createPlasmicElementProxy;

export type PlasmicButtonAddItem__VariantMembers = {};
export type PlasmicButtonAddItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicButtonAddItem__VariantsArgs;
export const PlasmicButtonAddItem__VariantProps = new Array<VariantPropType>();

export type PlasmicButtonAddItem__ArgsType = {};
type ArgPropType = keyof PlasmicButtonAddItem__ArgsType;
export const PlasmicButtonAddItem__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonAddItem__OverridesType = {
  addItemButton?: Flex__<"div">;
  textButton?: Flex__<"div">;
};

export interface DefaultButtonAddItemProps {
  className?: string;
}

const $$ = {};

function PlasmicButtonAddItem__RenderFunc(props: {
  variants: PlasmicButtonAddItem__VariantsArgs;
  args: PlasmicButtonAddItem__ArgsType;
  overrides: PlasmicButtonAddItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"addItemButton"}
      data-plasmic-override={overrides.addItemButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.addItemButton
      )}
      onClick={async event => {
        const $steps = {};

        $steps["goToComplete"] = true
          ? (() => {
              const actionArgs = { destination: `/complete` };
              return (({ destination }) => {
                if (
                  typeof destination === "string" &&
                  destination.startsWith("#")
                ) {
                  document
                    .getElementById(destination.substr(1))
                    .scrollIntoView({ behavior: "smooth" });
                } else {
                  location.assign(destination);
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["goToComplete"] != null &&
          typeof $steps["goToComplete"] === "object" &&
          typeof $steps["goToComplete"].then === "function"
        ) {
          $steps["goToComplete"] = await $steps["goToComplete"];
        }
      }}
    >
      <div
        data-plasmic-name={"textButton"}
        data-plasmic-override={overrides.textButton}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.textButton
        )}
      >
        {"Add Item"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  addItemButton: ["addItemButton", "textButton"],
  textButton: ["textButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  addItemButton: "div";
  textButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonAddItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonAddItem__VariantsArgs;
    args?: PlasmicButtonAddItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButtonAddItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonAddItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonAddItem__ArgProps,
          internalVariantPropNames: PlasmicButtonAddItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonAddItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "addItemButton") {
    func.displayName = "PlasmicButtonAddItem";
  } else {
    func.displayName = `PlasmicButtonAddItem.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonAddItem = Object.assign(
  // Top-level PlasmicButtonAddItem renders the root element
  makeNodeComponent("addItemButton"),
  {
    // Helper components rendering sub-elements
    textButton: makeNodeComponent("textButton"),

    // Metadata about props expected for PlasmicButtonAddItem
    internalVariantProps: PlasmicButtonAddItem__VariantProps,
    internalArgProps: PlasmicButtonAddItem__ArgProps
  }
);

export default PlasmicButtonAddItem;
/* prettier-ignore-end */
